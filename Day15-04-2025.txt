Git Init Command

•	It will be used to Create new Repository in the git 

•	By Running this Command you will able to create the New Structured Files 
•	in the Current Directory

•	Allows you to keep Start Tracking changes

•	 Open the Command prompt

•	Type the Command Git init // it will create a new Repository

•	Git init bare - it will be creating bare Repository it will not Create any Working Repository it used to create the shared Repository (Between the files)

•	Git init -q // it will removes the unnecessary Outputs

•	Git init -shared // it will used to create the shared Repository between
Multiple Users

•	After Creating the command you can get git directory to the github account for that follow steps

•	 Login to the Github account

•	Click on the new Repository and create the Repository

•	Public or private as per your Requirements

•	 and then name the Repository

•	 And click the create Repository

•	 You will get the Remote url 

•	 and After that connect the git into github for that

•	 git remote add origin  remote url

•	git add filename

•	git commit - m " your message"

•	git push -u origin master (or)

•	git push -u origin main

•	for adding readme files 

echo "# repository name ">> README.md file






Main commands


1.	echo "# Database" >> README.md
2.	git init
3.	git add README.md
4.	git commit -m "first commit"
5.	git branch -M main
6.	git remote add origin https://github.com/lakshmi0348/Database.git
7.	git push -u origin main


Existing Repository 

1.	git remote add origin https://github.com/lakshmi0348/Database.git
2.	git branch -M main
3.	git push -u origin main

Git Clone Command


	git clone https://github.com/lakshmi0348/Database.git // clone repository and create same repository in some other files

	git clone --depth https://github.com/lakshmi0348/Database.git // clone repository you will need latest history not entire commit history 
	it also called shallow clone

	git clone -b branch name https://github.com/lakshmi0348/Database.git // clone repository it will create the repository in the particular branch



git add command 


	it is used to add file into repository


	git commit -m " intial commit"

	it will be used to commit changes

git push 

	it will be used to push the changes into GitHub

	git branch -M branchname

	it will be used to move to that particular branch name

git pull 

	it used to changes the remote repository into your local repository


	git pull is combination of
	git fetch 
	git merge

	git pull calls first git fetch remote repository
	and after it calls git merge it will merge from local repository

	git pull remote-name branch-name

	 git pull origin main


o	remote-name is origin 
o	branch-name is main



DataTypes:-

Data Types are divided into three types

1.primitive data Types

2.Non - Primitive Data Types

3.user -defined Data Types


Primitive Data Types

1.int
2.float
3.char
4.boolean
5.long
6.double
7.byte
8.short


Non - Primitive Data Types

1.Array
2.Strings

User -defined Data Types

1.class
2.interface

					Primitive Data types

Primitive Data Types

	1.int - integer it is used to store integer values

	 Ex:-10,20,300,4567 like that 

	Syntax:-

	For Declaring Data Types and Variables

	DataType variablename = value ;

	int  a = 12; // static way of declaring a Integer Variable

	int  b = sc.nextInt(); // Dynamic way of declaring a Integer Variable

	nextInt() - it is non static method so we are calling the variable using 
•	creating object 

	Syntax:

o	Scanner sc = new Scanner(System.in);
o	int b= sc.nextInt();
	
					 
								

int - 4 bytes

	  32 bits

	  Default value is 0

	  Range:-  -2^31 to 2^31-1



2.float - float it is used to store floating (or) decimal values

			Ex:-10.12,20.45,30.50,45.67 like that 

			Syntax:-

			For Declaring Data Types and Variables

  			DataType variablename = value ;
	
  			float  a = 12.45f; // static way of declaring a float Variable

  			float b = sc.nextFloatt(); // Dynamic way of declaring a float Variable

 			nextFloat() - it is non static method so we are calling the variable 
				          using object creation
Syntax:

	Scanner sc = new Scanner(System.in);
	float b= sc.nextFloat();
	
float - 4 bytes
32 bits
Default value is 0.0f
Range:-  -2^31 to 2^31-1



		3.double - double it is used to store floating (or) decimal values

•	Ex:-10.12,20.45,30.50,45.67 like that 

•	Syntax:-

•	For Declaring Data Types and Variables

•	DataType variablename = value ;

•	double  a = 12.45; // static way of declaring a float Variable

•	double b = sc.nextDouble(); // Dynamic way of declaring a Double Variable

•	nextDouble() - it is non static method so we are calling the variable using 
	creating object 
•	Syntax:

	Scanner sc = new Scanner(System.in);
	float b= sc.nextDouble();



	double d = 1.2;

	Both float and double are same but double data type will be stored more than after point it will store more than 6 points for storing more than 6 values go for double datatype 

o	double - 8 bytes

o	64 bits

o	Default value is 0.0d

o	zRange:-  -2^63 to 2^63-1



4.Long - long it is used to store integer values

	Ex:-10,20,300,456723456 like that 

	Syntax:-

	For Declaring Data Types and Variables

	DataType variablename = value ;

	long  a = 12; // static way of declaring a long Integer Variable

	long  b = sc.nextLong(); // Dynamic way of declaring a  long Integer Variable

	nextLong() - it is non static method so we are calling the variable using 
	creating object 

	Syntax:

	Scanner sc = new Scanner(System.in);
	int b= sc.nextLong();



	long - 8 bytes

	64 bits

	Default value is 0.0L

	Range:-  -2^63 to 2^63-1


	5.short - short it is used to store integer values

	Ex:-10,20 like that 

	Syntax:-

	For Declaring Data Types and Variables

	DataType variablename = value ;

	short  a = 12; // static way of declaring a short Variable

	short  b = sc.nextShort(); // Dynamic way of declaring a short Variable

	nextShort() - it is non static method so we are calling the variable using 
	creating object 

	Syntax:

	Scanner sc = new Scanner(System.in);
	int b= sc.nextShot();



	short - 2 bytes

	16 bits

	Default value is 0

	Range:-  -32,768 to 32,767 


	6.Byte - Byte it is used to store integer values

	Ex:-10,20,300,4567 like that 

	Syntax:-

	For Declaring Data Types and Variables

	DataType variablename = value ;

	byte  a = 12; // static way of declaring a Byte Variable

	byte  b = sc.nextByte(); // Dynamic way of declaring a Byte Variable

	nextByte() - it is non static method so we are calling the variable using 
	creating object 

	Syntax:

	Scanner sc = new Scanner(System.in);
	int b= sc.nextByte();



	Byte - 1 bytes

	8 bits

	Default value is 0

	Range:-  -128 to 127

7.Boolean - Boolean it is used to store true or false values

	Ex:-True ,false like that 

	Syntax:-

	For Declaring Data Types and Variables

	DataType variablename = value ;

	boolean  a = True; // static way of declaring a Boolean Variable

	boolean  b = sc.nextBoolean(); // Dynamic way of declaring a Boolean Variable

	nextBoolean() - it is non static method so we are calling the variable using 
	creating object 

	Syntax:

	Scanner sc = new Scanner(System.in);
	int b= sc.nextBoolean();

				

Boolean - 1 bit
Default value is False

	  

	8.Char - char it is used to store Single characters

	 Ex:-'a','b','c' like that

	Syntax:- 

	 For Declaring Data Types and Variables

	DataType variablename = value ;

	char  a = 'T'; // static way of declaring a Boolean Variable

	char b = sc.next().charAt(0); // Dynamic way of declaring a Boolean Variable

	next().charAt(0) - it is non static method so we are calling the variable using 
	                       	       creating object 
		
 		


Syntax:

o	Scanner sc = new Scanner(System.in);
o	char b= sc.next().charAt(0);
	
			

char - 2 bytes
 Default value is ' '







Non - primitive Data Types

String:

	Represents a sequence of characters
	Example: String str = "Hello, World!";
Arrays:

	A collection of elements of the same type
	Example: int[] arr = {1, 2, 3, 4};
Classes:

	User-defined blueprint from which objects are created
	Example:

class Student {
    String  Name;
    int id ;
}
Interfaces:

	Abstract types used to specify a behavior that classes must implement
	Example:

interface Employee {
    void salary();
}
Enums:

	Special data type that enables for a variable to be a set of predefined constants
	Example:

enum Day {
    SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY
}
Variables :-
Variables is name to store which type of data will be stored in that particular data

Variables are must be start letters and underscores

Variables can be initialized at the time of declarations and later

Better way is to declare before using the variable in any operations if you are not 

It show intilazation error

Ex:-

Without initilazation

	Int age;

	Float amount;

	Char ch;

	Boolean b;

	Short s;

	Byte b;

	Long phonenumber ;

	Double bankbalance;


With Initilazation

	Int age =12;

	Float amount=1000.00;

	Char ch=’c’;

	Boolean b=True;

	Short s=1;

	Byte b=3;

	Long phonenumber =3456789876543;

	Double bankbalance=345676.543456;


Types of Variables

	1.local Variables

	2.Global Variables

Local Variables :

	If the variables are declared inside a method  or block is known as local varaiables
Global Variables:

	If the variables are declared inside a class is known as Global Variables
	If we are not assigning values for global Variables by default it will assign the default values  for that variables
	Static variables
	Non static Variables


Loops:-
Loops is a set of Instructions execute repeatedly until  condition gets falsed

	For loop

	While loop

	Do while loop


	For is used for no of steps or iterations or known

	Do while is used whatever u put do in that block i

	It will execute alteast one time

	After that conditions and execute

	While loop is used for No of steps are unknown

For loop Syntax:


for(i=0;i<=5;i++)
{
    System.out.println("For loop "+i);
}

While loop:-


 while(i!=12)
{
    System.out.println(i+" while loop");
    i++;
}



Do while loop:-


do{
    System.out.println("Do while loop" +i);
    i++;
}while(i!=5);

If Else Statements:


	If is executed when the condition is true
	Else will be Executed when the condition is flase
	Syntax:

int a =sc.nextInt();

int b=sc.nextInt();
if(a>b)
{
  System.out.println(" A is Greater than")  ;
}
else
{
    System.out.println(" b is greater than");
}

Switch :-


	The switch statement in Java is a control flow statement that allows you to execute one block of code among many based on the value of an expression

Syntax:
int n=sc.nextInt();


switch (n)
{
    case 1: System.out.println("hello");
            break;
    case 2:   System.out.println("hello hiii");
            break;
    default:
        System.out.println("bye");


}

Basic Input and Output 


For Handling Input and Output Operations

IO package helps the user to perform all the input-output operations.

System.in:-


This is the standard input stream(System.in) that is used to read characters from the keyboard or any other standard input device.


System.out:-

This is the standard output stream (System.out) that is used to produce the result of a program on an output device like the computer screen. Here is a list of the various print functions that we use to output statements:

Print()-it will prints the output in same line

Println()- it will prints the output in new line

Printf()- it will used to print using format Specifier 


Operators:-
	Arithmetic
1.	* :   Multiplication
2.	/ :    Division
3.	% :  Modulus
4.	+ :   Addition
5.	– :   Subtraction

	logical 
o	Logical And 
o	Logical OR
o	Logical Not



	Relational
< Less than

>  greater than

<= Less than equal

>= Greater than Equal 

==   Equality

!=  Not Equal

	Ternary
 		Condition? True : false

	Break
		break;

	Continue
                  Continue;



Arithmetic Operators


Used for basic mathematical operations.
---------------------------------------------
Operator 	Meaning			Example		Result
*		Multiplication		5 * 3		15

/		Division		10 / 2		5

%		Modulus			10 % 3		1

+		Addition		4 + 6		10

-		Subtraction		9 - 2		7



________________________________________
 Logical Operators

Used to combine multiple conditions.


Operator  Meaning		Example			Result
&&	   Logical AND		(5 > 3 && 4 < 6)	true

!	   Logical NOT		!(5 > 3)		false

||	   Logical OR		(5>3 || 7<6)		false
________________________________________
Relational Operators

Used to compare two values.


Operator		Meaning			Example	Result
<			Less than		3 < 5	true

>			Greater than		5 > 2	true

<=			Less than or equal to	5 <= 5	true

>=			Greater than or equal	6 >= 3	true

==			Equal to		4== 4	true

!=			Not equal to		5 != 2	true
________________________________________
 Ternary Operator

A shortcut for if-else statements.

int a = 10, b = 20;

int max = (a > b) ? a : b; // max will be 20
________________________________________
 Break Statement

Used to exit a loop .


for (int i = 1; i <= 5; i++)

 {
    		if (i == 3)
 		break;
	System.out.print(i);// Output: 1 2
}
________________________________________
 Continue Statement


Skips the current iteration and moves to the next.


for (int i = 1; i <= 5; i++) 

{
    if (i == 3) 
	continue;
	System.out.print(i);// Output: 1 2 4 5
}






	

	  
	

	







